(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Hashtbl
module Ortac_runtime = Ortac_runtime_qcheck_stm
let rec remove_first x xs =
  try
    if Ortac_runtime.Gospelstdlib.Sequence.empty = xs
    then xs
    else
      if
        (Ortac_runtime.Gospelstdlib.fst
           (Ortac_runtime.Gospelstdlib.Sequence.hd xs))
          = x
      then Ortac_runtime.Gospelstdlib.Sequence.tl xs
      else
        Ortac_runtime.Gospelstdlib.Sequence.cons
          (Ortac_runtime.Gospelstdlib.Sequence.hd xs)
          (remove_first x (Ortac_runtime.Gospelstdlib.Sequence.tl xs))
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "hashtbl.mli";
                   pos_lnum = 49;
                   pos_bol = 2556;
                   pos_cnum = 2562
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "hashtbl.mli";
                   pos_lnum = 53;
                   pos_bol = 2669;
                   pos_cnum = 2749
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = (char, int) t
                             let init () = create ~random:false 16
                           end)
module ModelElt =
  struct
    type nonrec elt =
      {
      contents: (char * int) Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let random = false
      and size = 16 in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "hashtbl.mli";
                            pos_lnum = 7;
                            pos_bol = 326;
                            pos_cnum = 351
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "hashtbl.mli";
                            pos_lnum = 7;
                            pos_bol = 326;
                            pos_cnum = 365
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of bool * int 
      | Clear 
      | Reset 
      | Copy 
      | Add of char * int 
      | Find of char 
      | Find_opt of char 
      | Find_all of char 
      | Mem of char 
      | Remove of char 
      | Replace of char * int 
      | Length 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create (random, size) ->
          Format.asprintf "%s %a %a" "create" (Util.Pp.pp_bool true) random
            (Util.Pp.pp_int true) size
      | Clear -> Format.asprintf "%s <sut>" "clear"
      | Reset -> Format.asprintf "%s <sut>" "reset"
      | Copy -> Format.asprintf "%s <sut>" "copy"
      | Add (a_1, b_1) ->
          Format.asprintf "%s <sut> %a %a" "add" (Util.Pp.pp_char true) a_1
            (Util.Pp.pp_int true) b_1
      | Find a_2 ->
          Format.asprintf "protect (fun () -> %s <sut> %a)" "find"
            (Util.Pp.pp_char true) a_2
      | Find_opt a_3 ->
          Format.asprintf "%s <sut> %a" "find_opt" (Util.Pp.pp_char true) a_3
      | Find_all a_4 ->
          Format.asprintf "%s <sut> %a" "find_all" (Util.Pp.pp_char true) a_4
      | Mem a_5 ->
          Format.asprintf "%s <sut> %a" "mem" (Util.Pp.pp_char true) a_5
      | Remove a_6 ->
          Format.asprintf "%s <sut> %a" "remove" (Util.Pp.pp_char true) a_6
      | Replace (a_7, b_2) ->
          Format.asprintf "%s <sut> %a %a" "replace" (Util.Pp.pp_char true)
            a_7 (Util.Pp.pp_int true) b_2
      | Length -> Format.asprintf "%s <sut>" "length"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun random -> fun size -> Create (random, size))) <*>
                   bool)
                  <*> small_signed_int;
               pure Clear;
               pure Reset;
               pure Copy;
               ((pure (fun a_1 -> fun b_1 -> Add (a_1, b_1))) <*> char) <*>
                 int;
               (pure (fun a_2 -> Find a_2)) <*> char;
               (pure (fun a_3 -> Find_opt a_3)) <*> char;
               (pure (fun a_4 -> Find_all a_4)) <*> char;
               (pure (fun a_5 -> Mem a_5)) <*> char;
               (pure (fun a_6 -> Remove a_6)) <*> char;
               ((pure (fun a_7 -> fun b_2 -> Replace (a_7, b_2))) <*> char)
                 <*> int;
               pure Length])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create (random, size) ->
          let h__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 7;
                                    pos_bol = 326;
                                    pos_cnum = 351
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 7;
                                    pos_bol = 326;
                                    pos_cnum = 365
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) h__005_
      | Clear ->
          let h_1__006_ = Model.get state__003_ 0 in
          let h_1__007_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 12;
                                    pos_bol = 518;
                                    pos_cnum = 543
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 12;
                                    pos_bol = 518;
                                    pos_cnum = 557
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) h_1__007_
      | Reset ->
          let h_2__008_ = Model.get state__003_ 0 in
          let h_2__009_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 17;
                                    pos_bol = 711;
                                    pos_cnum = 736
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 17;
                                    pos_bol = 711;
                                    pos_cnum = 750
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) h_2__009_
      | Copy ->
          let h1__010_ = Model.get state__003_ 0 in
          let h2__013_ =
            let open ModelElt in
              {
                contents =
                  (try h1__010_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 21;
                                    pos_bol = 899;
                                    pos_cnum = 925
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 21;
                                    pos_bol = 899;
                                    pos_cnum = 936
                                  }
                              })))
              }
          and h1__012_ = h1__010_ in
          Model.push (Model.push (Model.drop_n state__003_ 1) h1__012_)
            h2__013_
      | Add (a_1, b_1) ->
          let h_3__014_ = Model.get state__003_ 0 in
          let h_3__015_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons (a_1, b_1)
                       h_3__014_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 26;
                                    pos_bol = 1100;
                                    pos_cnum = 1125
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 26;
                                    pos_bol = 1100;
                                    pos_cnum = 1162
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) h_3__015_
      | Find a_2 ->
          let h_4__016_ = Model.get state__003_ 0 in
          let h_4__017_ = h_4__016_ in
          Model.push (Model.drop_n state__003_ 1) h_4__017_
      | Find_opt a_3 ->
          let h_5__018_ = Model.get state__003_ 0 in
          let h_5__019_ = h_5__018_ in
          Model.push (Model.drop_n state__003_ 1) h_5__019_
      | Find_all a_4 ->
          let h_6__020_ = Model.get state__003_ 0 in
          let h_6__021_ = h_6__020_ in
          Model.push (Model.drop_n state__003_ 1) h_6__021_
      | Mem a_5 ->
          let h_7__022_ = Model.get state__003_ 0 in
          let h_7__023_ = h_7__022_ in
          Model.push (Model.drop_n state__003_ 1) h_7__023_
      | Remove a_6 ->
          let h_8__024_ = Model.get state__003_ 0 in
          let h_8__025_ =
            let open ModelElt in
              {
                contents =
                  (try remove_first a_6 h_8__024_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 58;
                                    pos_bol = 2954;
                                    pos_cnum = 2979
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 58;
                                    pos_bol = 2954;
                                    pos_cnum = 2991
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) h_8__025_
      | Replace (a_7, b_2) ->
          let h_9__026_ = Model.get state__003_ 0 in
          let h_9__027_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons (a_7, b_2)
                       (remove_first a_7 h_9__026_.contents)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 63;
                                    pos_bol = 3201;
                                    pos_cnum = 3226
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 63;
                                    pos_bol = 3201;
                                    pos_cnum = 3280
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) h_9__027_
      | Length ->
          let h_10__028_ = Model.get state__003_ 0 in
          let h_10__029_ = h_10__028_ in
          Model.push (Model.drop_n state__003_ 1) h_10__029_
    let precond cmd__061_ state__062_ =
      match cmd__061_ with
      | Create (random, size) -> true
      | Clear -> true
      | Reset -> true
      | Copy -> true
      | Add (a_1, b_1) -> true
      | Find a_2 -> true
      | Find_opt a_3 -> true
      | Find_all a_4 -> true
      | Mem a_5 -> true
      | Remove a_6 -> true
      | Replace (a_7, b_2) -> true
      | Length -> true
    let postcond _ _ _ = true
    let run cmd__063_ sut__064_ =
      match cmd__063_ with
      | Create (random, size) ->
          Res
            (sut,
              (let res__065_ = create ~random size in
               (SUT.push sut__064_ res__065_; res__065_)))
      | Clear ->
          Res
            (unit,
              (let h_1__066_ = SUT.pop sut__064_ in
               let res__067_ = clear h_1__066_ in
               (SUT.push sut__064_ h_1__066_; res__067_)))
      | Reset ->
          Res
            (unit,
              (let h_2__068_ = SUT.pop sut__064_ in
               let res__069_ = reset h_2__068_ in
               (SUT.push sut__064_ h_2__068_; res__069_)))
      | Copy ->
          Res
            (sut,
              (let h1__070_ = SUT.pop sut__064_ in
               let res__071_ = copy h1__070_ in
               (SUT.push sut__064_ h1__070_;
                SUT.push sut__064_ res__071_;
                res__071_)))
      | Add (a_1, b_1) ->
          Res
            (unit,
              (let h_3__072_ = SUT.pop sut__064_ in
               let res__073_ = add h_3__072_ a_1 b_1 in
               (SUT.push sut__064_ h_3__072_; res__073_)))
      | Find a_2 ->
          Res
            ((result int exn),
              (let h_4__074_ = SUT.pop sut__064_ in
               let res__075_ = protect (fun () -> find h_4__074_ a_2) () in
               (SUT.push sut__064_ h_4__074_; res__075_)))
      | Find_opt a_3 ->
          Res
            ((option int),
              (let h_5__076_ = SUT.pop sut__064_ in
               let res__077_ = find_opt h_5__076_ a_3 in
               (SUT.push sut__064_ h_5__076_; res__077_)))
      | Find_all a_4 ->
          Res
            ((list int),
              (let h_6__078_ = SUT.pop sut__064_ in
               let res__079_ = find_all h_6__078_ a_4 in
               (SUT.push sut__064_ h_6__078_; res__079_)))
      | Mem a_5 ->
          Res
            (bool,
              (let h_7__080_ = SUT.pop sut__064_ in
               let res__081_ = mem h_7__080_ a_5 in
               (SUT.push sut__064_ h_7__080_; res__081_)))
      | Remove a_6 ->
          Res
            (unit,
              (let h_8__082_ = SUT.pop sut__064_ in
               let res__083_ = remove h_8__082_ a_6 in
               (SUT.push sut__064_ h_8__082_; res__083_)))
      | Replace (a_7, b_2) ->
          Res
            (unit,
              (let h_9__084_ = SUT.pop sut__064_ in
               let res__085_ = replace h_9__084_ a_7 b_2 in
               (SUT.push sut__064_ h_9__084_; res__085_)))
      | Length ->
          Res
            (int,
              (let h_10__086_ = SUT.pop sut__064_ in
               let res__087_ = length h_10__086_ in
               (SUT.push sut__064_ h_10__086_; res__087_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__089_ state__090_ last__092_ res__091_ =
  let open Spec in
    let open STM in
      match (cmd__089_, res__091_) with
      | (Create (random, size), Res ((SUT, _), h)) ->
          let lhs = if last__092_ then "r" else SUT.get_name state__090_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a %a" lhs "create"
            (Util.Pp.pp_bool true) random (Util.Pp.pp_int true) size
      | (Clear, Res ((Unit, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "clear"
            (SUT.get_name state__090_ (0 + shift))
      | (Reset, Res ((Unit, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "reset"
            (SUT.get_name state__090_ (0 + shift))
      | (Copy, Res ((SUT, _), h2)) ->
          let lhs = if last__092_ then "r" else SUT.get_name state__090_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %s" lhs "copy"
            (SUT.get_name state__090_ (0 + shift))
      | (Add (a_1, b_1), Res ((Unit, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a %a" lhs "add"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_1
            (Util.Pp.pp_int true) b_1
      | (Find a_2, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s %a)" lhs "find"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_2
      | (Find_opt a_3, Res ((Option (Int), _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "find_opt"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_3
      | (Find_all a_4, Res ((List (Int), _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "find_all"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_4
      | (Mem a_5, Res ((Bool, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "mem"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_5
      | (Remove a_6, Res ((Unit, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "remove"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_6
      | (Replace (a_7, b_2), Res ((Unit, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a %a" lhs "replace"
            (SUT.get_name state__090_ (0 + shift)) (Util.Pp.pp_char true) a_7
            (Util.Pp.pp_int true) b_2
      | (Length, Res ((Int, _), _)) ->
          let lhs = if last__092_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "length"
            (SUT.get_name state__090_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__030_ state__031_ res__032_ =
  let open Spec in
    let open STM in
      let new_state__033_ = lazy (next_state cmd__030_ state__031_) in
      match (cmd__030_, res__032_) with
      | (Create (random, size), Res ((SUT, _), h)) -> None
      | (Clear, Res ((Unit, _), _)) -> None
      | (Reset, Res ((Unit, _), _)) -> None
      | (Copy, Res ((SUT, _), h2)) -> None
      | (Add (a_1, b_1), Res ((Unit, _), _)) -> None
      | (Find a_2, Res ((Result (Int, Exn), _), b_3)) ->
          (match b_3 with
           | Ok b_3 ->
               if
                 let h_old__038_ = Model.get state__031_ 0
                 and h_new__039_ =
                   lazy (Model.get (Lazy.force new_state__033_) 0) in
                 (try
                    Ortac_runtime.Gospelstdlib.Sequence.mem
                      (Lazy.force h_new__039_).contents (a_2, b_3)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 32;
                                   pos_bol = 1478;
                                   pos_cnum = 1490
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 32;
                                   pos_bol = 1478;
                                   pos_cnum = 1520
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                      (Ortac_runtime.Protected_value
                         (Res (Ortac_runtime.dummy, ()))) "find"
                      [("Sequence.mem h.contents (a, b)",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 32;
                               pos_bol = 1478;
                               pos_cnum = 1490
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 32;
                               pos_bol = 1478;
                               pos_cnum = 1520
                             }
                         })])
           | Error (Not_found) ->
               if
                 let h_old__042_ = Model.get state__031_ 0
                 and h_new__043_ =
                   lazy (Model.get (Lazy.force new_state__033_) 0) in
                 (try
                    not
                      (Ortac_runtime.Gospelstdlib.Sequence.mem
                         (Ortac_runtime.Gospelstdlib.Sequence.map
                            Ortac_runtime.Gospelstdlib.fst
                            (Lazy.force h_new__043_).contents) a_2)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 31;
                                   pos_bol = 1403;
                                   pos_cnum = 1427
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 31;
                                   pos_bol = 1403;
                                   pos_cnum = 1477
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                      (Ortac_runtime.Exception "Not_found") "find"
                      [("not (Sequence.mem (Sequence.map fst h.contents) a)",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 31;
                               pos_bol = 1403;
                               pos_cnum = 1427
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 31;
                               pos_bol = 1403;
                               pos_cnum = 1477
                             }
                         })])
           | _ -> None)
      | (Find_opt a_3, Res ((Option (Int), _), o)) ->
          if
            let h_old__045_ = Model.get state__031_ 0
            and h_new__046_ = lazy (Model.get (Lazy.force new_state__033_) 0) in
            (try
               (match o with
                | None ->
                    if
                      not
                        (Ortac_runtime.Gospelstdlib.Sequence.mem
                           (Ortac_runtime.Gospelstdlib.Sequence.map
                              Ortac_runtime.Gospelstdlib.fst
                              (Lazy.force h_new__046_).contents) a_3)
                    then true
                    else false
                | Some b_4 ->
                    if
                      Ortac_runtime.Gospelstdlib.Sequence.mem
                        (Lazy.force h_new__046_).contents (a_3, b_4)
                    then true
                    else false)
                 = true
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 36;
                              pos_bol = 1685;
                              pos_cnum = 1697
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 38;
                              pos_bol = 1777;
                              pos_cnum = 1825
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ())))
                 "find_opt"
                 [("match o with\n      | None -> not (Sequence.mem (Sequence.map fst h.contents) a)\n      | Some b -> Sequence.mem h.contents (a, b)",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 36;
                          pos_bol = 1685;
                          pos_cnum = 1697
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 38;
                          pos_bol = 1777;
                          pos_cnum = 1825
                        }
                    })])
      | (Find_all a_4, Res ((List (Int), _), bs)) ->
          if
            let h_old__048_ = Model.get state__031_ 0
            and h_new__049_ = lazy (Model.get (Lazy.force new_state__033_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.List.to_seq bs) =
                 (Ortac_runtime.Gospelstdlib.Sequence.filter_map
                    (fun (x_1, y) -> if x_1 = a_4 then Some y else None)
                    (Lazy.force h_new__049_).contents)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 42;
                              pos_bol = 1995;
                              pos_cnum = 2007
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 42;
                              pos_bol = 1995;
                              pos_cnum = 2089
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ())))
                 "find_all"
                 [("bs = Sequence.filter_map (fun (x, y) -> if x = a then Some y else None) h.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 42;
                          pos_bol = 1995;
                          pos_cnum = 2007
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 42;
                          pos_bol = 1995;
                          pos_cnum = 2089
                        }
                    })])
      | (Mem a_5, Res ((Bool, _), b_5)) ->
          if
            let h_old__051_ = Model.get state__031_ 0
            and h_new__052_ = lazy (Model.get (Lazy.force new_state__033_) 0) in
            (try
               (b_5 = true) =
                 (Ortac_runtime.Gospelstdlib.Sequence.mem
                    (Ortac_runtime.Gospelstdlib.Sequence.map
                       Ortac_runtime.Gospelstdlib.fst
                       (Lazy.force h_new__052_).contents) a_5)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 46;
                              pos_bol = 2291;
                              pos_cnum = 2303
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 46;
                              pos_bol = 2291;
                              pos_cnum = 2351
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ()))) "mem"
                 [("b = Sequence.mem (Sequence.map fst h.contents) a",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 46;
                          pos_bol = 2291;
                          pos_cnum = 2303
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 46;
                          pos_bol = 2291;
                          pos_cnum = 2351
                        }
                    })])
      | (Remove a_6, Res ((Unit, _), _)) -> None
      | (Replace (a_7, b_2), Res ((Unit, _), _)) -> None
      | (Length, Res ((Int, _), i)) ->
          if
            let h_old__058_ = Model.get state__031_ 0
            and h_new__059_ = lazy (Model.get (Lazy.force new_state__033_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int i) =
                 (Ortac_runtime.Gospelstdlib.Sequence.length
                    (Lazy.force h_new__059_).contents)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 78;
                              pos_bol = 4064;
                              pos_cnum = 4076
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 78;
                              pos_bol = 4064;
                              pos_cnum = 4106
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value
                    (Res
                       (integer,
                         (let h_old__056_ = Model.get state__031_ 0
                          and h_new__057_ =
                            lazy (Model.get (Lazy.force new_state__033_) 0) in
                          try
                            Ortac_runtime.Gospelstdlib.Sequence.length
                              (Lazy.force h_new__057_).contents
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "hashtbl.mli";
                                           pos_lnum = 78;
                                           pos_bol = 4064;
                                           pos_cnum = 4080
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "hashtbl.mli";
                                           pos_lnum = 78;
                                           pos_bol = 4064;
                                           pos_cnum = 4106
                                         }
                                     })))))) "length"
                 [("i = Sequence.length h.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 78;
                          pos_bol = 4064;
                          pos_cnum = 4076
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 78;
                          pos_bol = 4064;
                          pos_cnum = 4106
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Hashtbl STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
