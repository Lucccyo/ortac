(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Queue
module Ortac_runtime = Ortac_runtime_qcheck_stm
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = int t
    type cmd =
      | Push of int 
      | Pop 
      | Peek 
      | Peek_opt 
      | Clear 
      | Is_empty 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Push v -> Format.asprintf "%s %a sut" "push" (Util.Pp.pp_int true) v
      | Pop -> Format.asprintf "protect (fun () -> %s sut)" "pop"
      | Peek -> Format.asprintf "protect (fun () -> %s sut)" "peek"
      | Peek_opt -> Format.asprintf "%s sut" "peek_opt"
      | Clear -> Format.asprintf "%s sut" "clear"
      | Is_empty -> Format.asprintf "%s sut" "is_empty"
    type nonrec state = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init_state =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 269
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 283
                          }
                      })))
      }
    let init_sut () = create ()
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun v -> Push v)) <*> int;
               pure Pop;
               pure Peek;
               pure Peek_opt;
               pure Clear;
               pure Is_empty])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Push v ->
          {
            contents =
              ((try
                  Ortac_runtime.Gospelstdlib.Sequence.snoc
                    state__003_.contents v
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 13;
                                 pos_bol = 441;
                                 pos_cnum = 466
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 13;
                                 pos_bol = 441;
                                 pos_cnum = 498
                               }
                           }))))
          }
      | Pop ->
          {
            contents =
              ((try
                  match Ortac_runtime.Gospelstdlib.Sequence.length
                          state__003_.contents
                  with
                  | __x__004_ when
                      (=) __x__004_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> Ortac_runtime.Gospelstdlib.Sequence.empty
                  | _ ->
                      Ortac_runtime.Gospelstdlib.Sequence.tl
                        state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 19;
                                 pos_bol = 732;
                                 pos_cnum = 757
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 21;
                                 pos_bol = 831;
                                 pos_cnum = 874
                               }
                           }))))
          }
      | Peek -> state__003_
      | Peek_opt -> state__003_
      | Clear ->
          {
            contents =
              ((try Ortac_runtime.Gospelstdlib.Sequence.empty
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 39;
                                 pos_bol = 1621;
                                 pos_cnum = 1646
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "queue.mli";
                                 pos_lnum = 39;
                                 pos_bol = 1621;
                                 pos_cnum = 1660
                               }
                           }))))
          }
      | Is_empty -> state__003_
    let precond cmd__015_ state__016_ =
      match cmd__015_ with
      | Push v -> true
      | Pop -> true
      | Peek -> true
      | Peek_opt -> true
      | Clear -> true
      | Is_empty -> true
    let postcond _ _ _ = true
    let run cmd__017_ sut__018_ =
      match cmd__017_ with
      | Push v -> Res (unit, (push v sut__018_))
      | Pop -> Res ((result int exn), (protect (fun () -> pop sut__018_) ()))
      | Peek ->
          Res ((result int exn), (protect (fun () -> peek sut__018_) ()))
      | Peek_opt -> Res ((option int), (peek_opt sut__018_))
      | Clear -> Res (unit, (clear sut__018_))
      | Is_empty -> Res (bool, (is_empty sut__018_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__005_ state__006_ res__007_ =
  let open Spec in
    let open STM in
      let new_state__008_ = lazy (next_state cmd__005_ state__006_) in
      match (cmd__005_, res__007_) with
      | (Push v, Res ((Unit, _), _)) -> None
      | (Pop, Res ((Result (Int, Exn), _), v_1)) ->
          (match v_1 with
           | Ok v_1 ->
               Ortac_runtime.append
                 (if
                    try
                      v_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           state__006_.contents)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 887
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 919
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Either.right
                            (Res
                               (int,
                                 (try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      state__006_.contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 887
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 919
                                }
                            })]))
                 (if
                    try
                      not
                        (state__006_.contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 932
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 964
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Either.right
                            (Res
                               (int,
                                 (try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      state__006_.contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 932
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 964
                                }
                            })]))
           | Error (Empty) ->
               if
                 (try
                    let __t1__009_ =
                      (Lazy.force new_state__008_).contents =
                        state__006_.contents in
                    let __t2__010_ =
                      state__006_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__009_ && __t2__010_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 663
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 707
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Either.left "Empty") "pop"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 663
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 707
                             }
                         })])
           | _ -> None)
      | (Peek, Res ((Result (Int, Exn), _), v_2)) ->
          (match v_2 with
           | Ok v_2 ->
               if
                 (try
                    v_2 =
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force new_state__008_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 28;
                                   pos_bol = 1163;
                                   pos_cnum = 1175
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 28;
                                   pos_bol = 1163;
                                   pos_cnum = 1201
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Either.right
                         (Res
                            (int,
                              (try
                                 Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force new_state__008_).contents
                               with
                               | e ->
                                   raise
                                     (Ortac_runtime.Partial_function
                                        (e,
                                          {
                                            Ortac_runtime.start =
                                              {
                                                pos_fname = "queue.mli";
                                                pos_lnum = 28;
                                                pos_bol = 1163;
                                                pos_cnum = 1179
                                              };
                                            Ortac_runtime.stop =
                                              {
                                                pos_fname = "queue.mli";
                                                pos_lnum = 28;
                                                pos_bol = 1163;
                                                pos_cnum = 1201
                                              }
                                          })))))) "peek"
                      [("v = Sequence.hd t.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 28;
                               pos_bol = 1163;
                               pos_cnum = 1175
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 28;
                               pos_bol = 1163;
                               pos_cnum = 1201
                             }
                         })])
           | Error (Empty) ->
               if
                 (try
                    let __t1__011_ =
                      (Lazy.force new_state__008_).contents =
                        state__006_.contents in
                    let __t2__012_ =
                      state__006_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__011_ && __t2__012_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 27;
                                   pos_bol = 1098;
                                   pos_cnum = 1118
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 27;
                                   pos_bol = 1098;
                                   pos_cnum = 1162
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Either.left "Empty") "peek"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 27;
                               pos_bol = 1098;
                               pos_cnum = 1118
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 27;
                               pos_bol = 1098;
                               pos_cnum = 1162
                             }
                         })])
           | _ -> None)
      | (Peek_opt, Res ((Option (Int), _), v_3)) ->
          if
            (try
               (match v_3 with
                | None ->
                    if
                      (Lazy.force new_state__008_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then true
                    else false
                | Some a_1 ->
                    if
                      a_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force new_state__008_).contents)
                    then true
                    else false)
                 = true
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 32;
                              pos_bol = 1344;
                              pos_cnum = 1356
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 34;
                              pos_bol = 1415;
                              pos_cnum = 1461
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Queue" "create ()"
                 (Either.right (Res (Ortac_runtime.dummy, ()))) "peek_opt"
                 [("match v with\n        | None -> t.contents = Sequence.empty\n        | Some a -> a = Sequence.hd t.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 32;
                          pos_bol = 1344;
                          pos_cnum = 1356
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 34;
                          pos_bol = 1415;
                          pos_cnum = 1461
                        }
                    })])
      | (Clear, Res ((Unit, _), _)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            (try
               b =
                 (match Ortac_runtime.Gospelstdlib.Sequence.length
                          (Lazy.force new_state__008_).contents
                  with
                  | __x__014_ when
                      (=) __x__014_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> true
                  | _ -> false)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 43;
                              pos_bol = 1799;
                              pos_cnum = 1811
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 45;
                              pos_bol = 1873;
                              pos_cnum = 1893
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Queue" "create ()"
                 (Either.right
                    (Res
                       (bool,
                         (try
                            match Ortac_runtime.Gospelstdlib.Sequence.length
                                    (Lazy.force new_state__008_).contents
                            with
                            | __x__013_ when
                                (=) __x__013_
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     0)
                                -> true
                            | _ -> false
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 43;
                                           pos_bol = 1799;
                                           pos_cnum = 1815
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 45;
                                           pos_bol = 1873;
                                           pos_cnum = 1893
                                         }
                                     })))))) "is_empty"
                 [("b = match Sequence.length t.contents with\n        | 0 -> true\n        | _ -> false",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 43;
                          pos_bol = 1799;
                          pos_cnum = 1811
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 45;
                          pos_bol = 1873;
                          pos_cnum = 1893
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Queue STM tests" check_init_state
        ortac_postcond])
